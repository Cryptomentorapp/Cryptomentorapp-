import 'dart:convert'; import 'package:flutter/material.dart'; import 'package:flutter/services.dart' show rootBundle; import '../services/academy_ai_local.dart'; import '../services/llm_service.dart';
class AcademyPage extends StatefulWidget{ const AcademyPage({super.key}); @override State<AcademyPage> createState()=>_A(); }
class _A extends State<AcademyPage>{ List _levels=[]; bool _loading=true; String? _error; Map? _selectedLesson; final _askCtrl=TextEditingController(); Map<String,dynamic>? _aiAns; late final AcademyAI _ai;
  @override void initState(){ super.initState(); _init(); }
  Future<void> _init() async { setState(()=>_loading=true); try{ final s=await rootBundle.loadString('assets/academy/lessons.json'); final data=jsonDecode(s); _levels=data['levels'] as List; final llm=LLMService(openAIApiKey: const String.fromEnvironment('OPENAI_API_KEY', defaultValue: ''), groqApiKey: const String.fromEnvironment('GROQ_API_KEY', defaultValue: '')); _ai=AcademyAI(llm: llm); await _ai.init(); _error=null; }catch(e){ _error=e.toString(); } setState(()=>_loading=false); }
  Future<void> _ask() async { final q=_askCtrl.text.trim(); if(q.isEmpty) return; final r=await _ai.ask(q); setState(()=>_aiAns=r); }
  @override Widget build(BuildContext c){ if(_loading) return const Scaffold(body: Center(child:CircularProgressIndicator())); if(_error!=null) return Scaffold(appBar: AppBar(title: const Text('Academy')), body: Center(child: Text('Error: '+_error!))); if(_selectedLesson!=null) return _LessonDetail(lesson:_selectedLesson!, onBack: ()=>setState(()=>_selectedLesson=null));
    return Scaffold(appBar: AppBar(title: const Text('Academy')), body: Column(children:[ Container(width: double.infinity, padding: const EdgeInsets.all(12), color: const Color(0xFF0F141B), child: const Text('AI Tutor: Local (offline). Cung cấp OPENAI_API_KEY/GROQ_API_KEY để bật LLM.', style: TextStyle(fontSize: 12, color: Color(0xFF93A1AE)))),
      Padding(padding: const EdgeInsets.all(12), child: Row(children:[ Expanded(child: TextField(controller:_askCtrl, decoration: const InputDecoration(prefixIcon: Icon(Icons.psychology_alt_outlined), hintText:'Hỏi AI theo giáo trình (vd: RSI là gì?)'))), const SizedBox(width:8), FilledButton(onPressed:_ask, child: const Text('Hỏi AI')), ])),
      Expanded(child: ListView(padding: const EdgeInsets.all(12), children:[ if(_aiAns!=null)...[ const Text('Liên quan trong giáo trình:', style: TextStyle(fontWeight: FontWeight.bold)), ...((_aiAns!['context'] as List).cast<Map>()).map((m)=>ListTile(title: Text(m['title']??''), subtitle: Text(m['excerpt']??''))), const SizedBox(height:8), const Text('Thuật ngữ:', style: TextStyle(fontWeight: FontWeight.bold)), ...((_aiAns!['glossary'] as List).cast<Map>()).map((g)=>ListTile(title: Text(g['term']??''), subtitle: Text(g['definition']??''))), const SizedBox(height:6), Text((_aiAns!['answer']??'').toString()), const Divider(), ],
        ExpansionPanelList.radio(children: _levels.asMap().entries.map((e){ final i=e.key; final lvl=Map<String,dynamic>.from(e.value); final lessons=(lvl['lessons'] as List).cast<Map>(); return ExpansionPanelRadio(value:i, headerBuilder: (_,__)=>ListTile(title: Text(lvl['level']??''), subtitle: Text('${lessons.length} bài')), body: Column(children: lessons.map((m)=>ListTile(title: Text(m['title']??''), subtitle: Text('~'+(m['duration_min']??12).toString()+' phút'), trailing: const Icon(Icons.chevron_right), onTap: ()=>setState(()=>_selectedLesson=m))).toList())); }).toList() ),
      ])), ])); } }
class _LessonDetail extends StatefulWidget{ final Map lesson; final VoidCallback onBack; const _LessonDetail({required this.lesson, required this.onBack}); @override State<_LessonDetail> createState()=>_D(); }
class _D extends State<_LessonDetail>{ int? _selectedIdx; int? _answerIdx; @override Widget build(BuildContext c){ final m=Map<String,dynamic>.from(widget.lesson); final quiz=(m['quiz'] as List?)?.cast<Map>()??const []; return Scaffold(appBar: AppBar(leading: IconButton(icon: const Icon(Icons.arrow_back), onPressed: widget.onBack), title: Text(m['title']??'Lesson')), body: ListView(padding: const EdgeInsets.all(16), children:[ Text(m['content']?.toString()??'', style: const TextStyle(height:1.45)), const SizedBox(height:16), if(quiz.isNotEmpty) const Text('Quiz nhanh', style: TextStyle(fontWeight: FontWeight.bold)), ...quiz.asMap().entries.map((e){ final qi=e.key; final q=Map<String,dynamic>.from(e.value); final choices=(q['choices'] as List).cast<String>(); return Card(child: Padding(padding: const EdgeInsets.all(12), child: Column(crossAxisAlignment: CrossAxisAlignment.start, children:[ Text('${qi+1}. '+(q['q']??'')), const SizedBox(height:8), ...choices.asMap().entries.map((cidx){ return RadioListTile<int>(value:cidx.key, groupValue: (_selectedIdx==qi)?_answerIdx:null, onChanged:(v){ setState((){ _selectedIdx=qi; _answerIdx=v; }); }, title: Text(cidx.value)); }), if(_selectedIdx==qi && _answerIdx!=null) Builder(builder: (_){ final correct=(q['answer']??0) as int; final ok=_answerIdx==correct; return Padding(padding: const EdgeInsets.only(top:8), child: Text(ok? 'Đúng ✅' : 'Sai ❌  •  Đáp án đúng: '+choices[correct]+'\n'+(q['explain']??''))); }), ]))); }), ])); } }