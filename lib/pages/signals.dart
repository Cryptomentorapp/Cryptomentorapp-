import 'dart:convert'; import 'package:flutter/material.dart'; import 'package:flutter/services.dart' show rootBundle; import '../services/signals_engine.dart'; import '../widgets/cm_card.dart';
class SignalsPage extends StatefulWidget{ const SignalsPage({super.key}); @override State<SignalsPage> createState()=>_S(); }
class _S extends State<SignalsPage>{ final eng=SignalsEngine(); Map<String,dynamic>? evalBTC, evalETH, evalBNB;
  @override void initState(){ super.initState(); _init(); }
  Future<void> _init() async { await eng.init(); final fb=await eng.loadFeatures('BTCUSDT'); final fe=await eng.loadFeatures('ETHUSDT'); final fn=await eng.loadFeatures('BNBUSDT');
    if((fb['rows'] as List).isNotEmpty) evalBTC=eng.evaluate(Map<String,dynamic>.from((fb['rows'] as List).last));
    if((fe['rows'] as List).isNotEmpty) evalETH=eng.evaluate(Map<String,dynamic>.from((fe['rows'] as List).last));
    if((fn['rows'] as List).isNotEmpty) evalBNB=eng.evaluate(Map<String,dynamic>.from((fn['rows'] as List).last));
    setState((){});
  }
  Widget _card(String title, Map<String,dynamic>? e){ if(e==null) return const SizedBox.shrink(); return CMCard(child: Column(crossAxisAlignment: CrossAxisAlignment.start, children:[ Text('$title — Verdict: '+(e['verdict']??''), style: const TextStyle(fontWeight: FontWeight.bold)), const SizedBox(height:8), Text('Total score: '+(e['total']??0).toString()), const SizedBox(height:8), const Text('Scores:'), ...((e['scores'] as Map<String,int>).entries.map((x)=>Text('• '+x.key+' = '+x.value.toString()))) ])); }
  @override Widget build(BuildContext c)=>ListView(padding: const EdgeInsets.all(16), children:[ const CMCard(child: Text('Signals — Confluence & Regime (offline demo, BTC/ETH/BNB H4)')), _card('BTCUSDT', evalBTC), _card('ETHUSDT', evalETH), _card('BNBUSDT', evalBNB), CMCard(child: Column(crossAxisAlignment: CrossAxisAlignment.start, children:[ const Text('Playbooks (v2):', style: TextStyle(fontWeight: FontWeight.bold)), FutureBuilder<String>(future: rootBundle.loadString('assets/ai/signals_playbooks_v2.json'), builder: (_,snap){ if(!snap.hasData) return const SizedBox.shrink(); final m=jsonDecode(snap.data!); final arr=(m['strategies'] as List).cast<Map>(); return Column(children: arr.map((s)=>ListTile(title: Text(s['name']??''), subtitle: Text('RR≥'+(s['risk']?['rr_min']??1.5).toString()+' • Filters: '+(s['filters']??{}).toString()))).toList()); }) ])), CMCard(child: Column(crossAxisAlignment: CrossAxisAlignment.start, children:[ const Text('BTC macro patterns:', style: TextStyle(fontWeight: FontWeight.bold)), FutureBuilder<String>(future: rootBundle.loadString('assets/ai/btc_macro_patterns_v1.json'), builder: (_,snap){ if(!snap.hasData) return const SizedBox.shrink(); final m=jsonDecode(snap.data!); return Column(crossAxisAlignment: CrossAxisAlignment.start, children:[ const Text('Trước khi tăng mạnh:'), ...((m['pre_move_up'] as List).map((x)=>Text('• '+x))), const SizedBox(height:4), const Text('Trước khi giảm mạnh:'), ...((m['pre_move_down'] as List).map((x)=>Text('• '+x))) ]); }) ])), ]);
}