import 'dart:convert'; import 'package:flutter/material.dart'; import 'package:http/http.dart' as http; class TokenScannerPage extends StatefulWidget{ const TokenScannerPage({super.key}); @override State<TokenScannerPage> createState()=>_T(); } class _T extends State<TokenScannerPage> with TickerProviderStateMixin{ final TextEditingController q=TextEditingController(); List<dynamic> results=[]; Map<String,dynamic>? detail; String? error; bool loading=false; List<_Hot> hot=[]; late TabController tab; @override void initState(){ super.initState(); tab=TabController(length:2, vsync:this); loadHot(); } Future<void> loadHot() async{ try{ final r=await http.get(Uri.parse('https://api.coingecko.com/api/v3/search/trending')); if(r.statusCode==200){ final data=jsonDecode(r.body); final coins=(data['coins'] as List?)??[]; hot=coins.map((e){ final it=(e as Map)['item']??{}; return _Hot((it['name']??'').toString(), (it['symbol']??'').toString(), (it['id']??'').toString(), it['market_cap_rank']); }).toList().cast<_Hot>(); } setState((){});}catch(_){}}  Future<void> search() async{ setState(()=>loading=true); try{ final r=await http.get(Uri.parse('https://api.coingecko.com/api/v3/search?query='+Uri.encodeComponent(q.text))); if(r.statusCode==200){ final data=jsonDecode(r.body) as Map<String,dynamic>; results=(data['coins'] as List?)??[]; error=null; } else { error='HTTP '+r.statusCode.toString(); } } catch(e){ error=e.toString(); } setState(()=>loading=false); }  Future<void> scanId(String id) async{ setState(()=>loading=true); try{ final r=await http.get(Uri.parse('https://api.coingecko.com/api/v3/coins/'+id+'?localization=false&tickers=false&market_data=true&community_data=false&developer_data=false&sparkline=false')); if(r.statusCode==200){ detail=jsonDecode(r.body) as Map<String,dynamic>; error=null; tab.animateTo(0);} else { error='HTTP '+r.statusCode.toString(); } } catch(e){ error=e.toString(); } setState(()=>loading=false); }  @override Widget build(BuildContext c){ return Column(children:[ TabBar(controller: tab, tabs: const [Tab(text:'Scan'), Tab(text:'Hotlist')]), Expanded(child: TabBarView(controller: tab, children:[ _scan(), _hot() ])), ]); }  Widget _scan(){ return Column(children:[ Padding(padding: const EdgeInsets.all(12), child: Row(children:[ Expanded(child: TextField(controller: q, decoration: const InputDecoration(prefixIcon: Icon(Icons.search), labelText:'Nhập tên token (vd: pepe)'))), const SizedBox(width:8), FilledButton(onPressed: search, child: const Text('Tìm')), ])), if(loading) const LinearProgressIndicator(), if(error!=null) Padding(padding: const EdgeInsets.all(12), child: Text('Error: '+error!)), if(detail==null) Expanded(child: ListView.separated(padding: const EdgeInsets.all(12), itemCount: results.length, itemBuilder:(_,i){ final r=Map<String,dynamic>.from(results[i] as Map); return Card(child: ListTile(leading: CircleAvatar(backgroundImage: NetworkImage((r['thumb']??'').toString())), title: Text((r['name']??'').toString()+' ('+(r['symbol']??'').toString().toUpperCase()+')'), subtitle: Text('Rank: '+((r['market_cap_rank']??'-')).toString()), trailing: const Icon(Icons.chevron_right), onTap: ()=>scanId((r['id']??'').toString()), )); }, separatorBuilder:(_,__)=>const SizedBox(height:8))), if(detail!=null) Expanded(child: _Detail(detail: detail!, onBack: ()=>setState(()=>detail=null))), ]); }  Widget _hot(){ if(hot.isEmpty) return const Center(child: Text('Đang tải hotlist... Kéo để reload.')); return RefreshIndicator(onRefresh: () async { await loadHot(); }, child: ListView.separated(padding: const EdgeInsets.all(12), itemCount: hot.length, itemBuilder:(_,i){ final h=hot[i]; return Card(child: ListTile(title: Text(h.name+' ('+h.symbol.toUpperCase()+')'), subtitle: Text('Trend · Rank #'+(h.rank?.toString() ?? '-')), trailing: const Icon(Icons.search), onTap: ()=>scanId(h.id))); }, separatorBuilder:(_,__)=>const SizedBox(height:8))); } } class _Hot{ final String name; final String symbol; final String id; final int? rank; _Hot(this.name,this.symbol,this.id,this.rank); } class _Detail extends StatelessWidget{ final Map<String,dynamic> detail; final VoidCallback onBack; const _Detail({super.key, required this.detail, required this.onBack}); String _usd(dynamic v){ if(v is num) return '\\$'+(v as num).toStringAsFixed(2); return '-'; } @override Widget build(BuildContext c){ final name=(detail['name']??'').toString(); final symbol=(detail['symbol']??'').toString().toUpperCase(); final img=(detail['image']?['small']??'').toString(); final mcap=(detail['market_data']?['market_cap']?['usd']); final price=(detail['market_data']?['current_price']?['usd']); final vol=(detail['market_data']?['total_volume']?['usd']); final risk=_risk(detail); final explain=_exp(detail); return ListView(padding: const EdgeInsets.all(16), children:[ Row(children:[ CircleAvatar(backgroundImage: NetworkImage(img), radius:18), const SizedBox(width:12), Text(name+' ('+symbol+')', style: const TextStyle(fontSize:18, fontWeight: FontWeight.bold)), const Spacer(), Chip(label: Text(risk)), ]), const SizedBox(height:8), Text('Giá hiện tại: '+_usd(price)), Text('Market cap: '+_usd(mcap)), Text('Volume 24h: '+_usd(vol)), const SizedBox(height:12), const Text('Giải thích:', style: TextStyle(fontWeight: FontWeight.bold)), Text(explain), const SizedBox(height:12), OutlinedButton.icon(onPressed:onBack, icon: const Icon(Icons.arrow_back), label: const Text('Quay lại kết quả')), ]; } static String _risk(Map<String,dynamic> d){ final mcap=d['market_data']?['market_cap']?['usd']??0; final vol=d['market_data']?['total_volume']?['usd']??0; int s=0; if(mcap is num && mcap<5000000) s+=2; if(vol is num && vol<200000) s+=1; if(s>=3) return 'HIGH RISK'; if(s>=2) return 'MEDIUM'; return 'SAFE'; } static String _exp(Map<String,dynamic> d){ final mcap=d['market_data']?['market_cap']?['usd']; final vol=d['market_data']?['total_volume']?['usd']; final r=<String>[]; if(mcap is num && mcap<5000000) r.add('Market cap nhỏ (<\\$5M)'); if(vol is num && vol<200000) r.add('Volume 24h thấp (<\\$200k)'); if(r.isEmpty) return 'Không phát hiện dấu hiệu rủi ro cao từ market data cơ bản.'; return r.join(' · ')+'. Khuyến nghị kiểm tra thêm holders & liquidity.'; } }