name: Deploy Cryptomentor Web
on: { workflow_dispatch: {} }

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-java@v4
        with: { distribution: temurin, java-version: '17' }

      - uses: subosito/flutter-action@v2
        with: { channel: stable, cache: true }

      - name: Create project + minimal UI
        run: |
          flutter create app
          cd app
          cat > lib/main.dart <<'DART'
          import 'package:flutter/material.dart';
          void main() => runApp(const App());
          class App extends StatelessWidget {
            const App({super.key});
            @override
            Widget build(BuildContext context) {
              return MaterialApp(
                title: 'Cryptomentor',
                debugShowCheckedModeBanner: false,
                theme: ThemeData.dark().copyWith(scaffoldBackgroundColor: const Color(0xFF0E0F14)),
                home: const Root(),
              );
            }
          }
          class Root extends StatefulWidget { const Root({super.key}); @override State<Root> createState()=>_RootState(); }
          class _RootState extends State<Root> {
            int i=0; bool pro=false;
            @override Widget build(BuildContext c){
              final pages = [
                const Home(), Signals(pro: pro, onUpgrade: ()=> setState(()=> pro=true)),
                const Scan(), const Alpha(), const Account()
              ];
              return Scaffold(
                body: SafeArea(child: pages[i]),
                bottomNavigationBar: NavigationBar(
                  selectedIndex: i, onDestinationSelected: (v)=> setState(()=> i=v),
                  destinations: const [
                    NavigationDestination(icon: Icon(Icons.home_outlined), selectedIcon: Icon(Icons.home), label: 'Home'),
                    NavigationDestination(icon: Icon(Icons.bolt), label: 'Signals'),
                    NavigationDestination(icon: Icon(Icons.shield_moon_outlined), label: 'Scan'),
                    NavigationDestination(icon: Icon(Icons.auto_awesome), label: 'Alpha'),
                    NavigationDestination(icon: Icon(Icons.person_outline), label: 'Account'),
                  ],
                ),
              );
            }
          }
          class Home extends StatelessWidget {
            const Home({super.key});
            @override Widget build(BuildContext c){
              final data = [
                {'name':'Bitcoin','symbol':'BTC','price':64450.12,'change':2.34},
                {'name':'Ethereum','symbol':'ETH','price':3240.55,'change':-0.8},
                {'name':'Solana','symbol':'SOL','price':152.81,'change':7.2},
              ];
              return ListView(padding: const EdgeInsets.all(16), children: [
                Container(
                  padding: const EdgeInsets.all(16),
                  decoration: BoxDecoration(color: const Color(0xFF11131A), borderRadius: BorderRadius.circular(24),
                    boxShadow: const [BoxShadow(color: Color(0x3300FFFF), blurRadius: 24, offset: Offset(0,6))],
                    border: Border.all(color: const Color(0x2233CCFF)),),
                  child: const Column(children:[
                    SizedBox(height:6),
                    Text('AI Driven Trading', style: TextStyle(fontSize:18, fontWeight: FontWeight.w700)),
                    SizedBox(height:10),
                  ]),
                ),
                const SizedBox(height:16),
                const Text('Market', style: TextStyle(fontSize:16, fontWeight: FontWeight.w700)),
                const SizedBox(height:8),
                ...data.map((it){ final up = (it['change'] as num) >= 0;
                  return ListTile(
                    leading: CircleAvatar(child: Text((it['symbol'] as String)[0])),
                    title: Text('${it['name']} â€¢ ${it['symbol']}'),
                    trailing: Column(mainAxisAlignment: MainAxisAlignment.center, crossAxisAlignment: CrossAxisAlignment.end, children: [
                      Text('\$${(it['price'] as num).toStringAsFixed(2)}'),
                      Text('${up?'+':''}${(it['change'] as num).toStringAsFixed(2)}%', style: TextStyle(color: up? Colors.greenAccent:Colors.redAccent)),
                    ]),
                  );
                })
              ]);
            }
          }
          class Signals extends StatelessWidget {
            final bool pro; final VoidCallback onUpgrade;
            const Signals({super.key, required this.pro, required this.onUpgrade});
            @override Widget build(BuildContext c){
              if(!pro) return Center(child: Column(mainAxisSize: MainAxisSize.min, children: [
                const Icon(Icons.lock_outline, size:64), const SizedBox(height:8),
                const Text('Unlock Pro Signals', style: TextStyle(fontSize:18, fontWeight: FontWeight.w700)),
                const SizedBox(height:10), ElevatedButton.icon(onPressed: onUpgrade, icon: const Icon(Icons.workspace_premium_outlined), label: const Text('Upgrade (mock)'))
              ]));
              return const Center(child: Text('Pro signals (mock)'));
            }
          }
          class Scan extends StatelessWidget { const Scan({super.key}); @override Widget build(BuildContext c)=> const Center(child: Text('AI Scan (mock)')); }
          class Alpha extends StatelessWidget { const Alpha({super.key}); @override Widget build(BuildContext c)=> const Center(child: Text('Hidden Alpha (mock)')); }
          class Account extends StatelessWidget { const Account({super.key}); @override Widget build(BuildContext c)=> const Center(child: Text('Account')); }
          DART

      - name: Build Flutter Web
        run: |
          cd app
          flutter build web --release

      - name: Configure Pages
        uses: actions/configure-pages@v5

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: app/build/web

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
