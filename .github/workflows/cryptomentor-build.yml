name: Build APK - Cryptomentor (One-File)

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 1 }

      - name: Set up Java 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Set up Flutter (stable)
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          cache: true

      - name: Create Flutter project
        run: |
          mkdir app && cd app
          flutter create .
          # Đặt tên app = Cryptomentor
          sed -i 's/<string name="app_name">.*<\/string>/<string name="app_name">Cryptomentor<\/string>/g' android/app/src/main/res/values/strings.xml || true
          sed -i 's/android:label="[^"]*"/android:label="@string\/app_name"/g' android/app/src/main/AndroidManifest.xml || true

      - name: Inject source (UI + assets)
        run: |
          cd app
          cat > pubspec.yaml <<'YAML'
          name: cryptomentor_full_ui_app
          description: Cryptomentor UI (Home/Market/Signals/Scan/Alpha/Account) with mock data
          publish_to: "none"
          environment:
            sdk: '>=2.17.0 <4.0.0'
          dependencies:
            flutter:
              sdk: flutter
          dev_dependencies:
            flutter_test:
              sdk: flutter
          flutter:
            uses-material-design: true
            assets:
              - assets/data/market.json
              - assets/data/signals.json
              - assets/data/scan.json
              - assets/data/alpha.json
          YAML

          mkdir -p lib/ui/widgets assets/data

          cat > lib/main.dart <<'DART'
          import 'package:flutter/material.dart';
          import 'ui/home_screen.dart';
          import 'ui/signals_screen.dart';
          import 'ui/scan_screen.dart';
          import 'ui/alpha_screen.dart';
          import 'ui/account_screen.dart';

          void main() => runApp(const CryptomentorApp());

          class CryptomentorApp extends StatelessWidget {
            const CryptomentorApp({super.key});
            @override
            Widget build(BuildContext context) {
              return MaterialApp(
                title: 'Cryptomentor',
                debugShowCheckedModeBanner: false,
                theme: ThemeData(
                  brightness: Brightness.dark,
                  colorScheme: const ColorScheme.dark(
                    primary: Color(0xFFF2B705),
                    secondary: Color(0xFF627EEA),
                  ),
                  scaffoldBackgroundColor: const Color(0xFF0E0F14),
                  navigationBarTheme: const NavigationBarThemeData(
                    backgroundColor: Color(0xFF0F1117),
                    indicatorColor: Color(0x33F2B705),
                  ),
                  fontFamily: 'Roboto',
                ),
                home: const RootNav(),
              );
            }
          }

          class RootNav extends StatefulWidget {
            const RootNav({super.key});
            @override
            State<RootNav> createState() => _RootNavState();
          }

          class _RootNavState extends State<RootNav> {
            int _index = 0;
            bool isPro = false;

            @override
            Widget build(BuildContext context) {
              final screens = [
                const HomeScreen(),
                SignalsScreen(isPro: isPro, onUpgrade: () => setState(() => isPro = true)),
                const ScanScreen(),
                const AlphaScreen(),
                const AccountScreen(),
              ];
              return Scaffold(
                body: SafeArea(child: screens[_index]),
                bottomNavigationBar: NavigationBar(
                  selectedIndex: _index,
                  onDestinationSelected: (i) => setState(() => _index = i),
                  destinations: const [
                    NavigationDestination(icon: Icon(Icons.home_outlined), selectedIcon: Icon(Icons.home), label: 'Home'),
                    NavigationDestination(icon: Icon(Icons.bolt), label: 'Signals'),
                    NavigationDestination(icon: Icon(Icons.shield_moon_outlined), label: 'Scan'),
                    NavigationDestination(icon: Icon(Icons.auto_awesome), label: 'Alpha'),
                    NavigationDestination(icon: Icon(Icons.person_outline), label: 'Account'),
                  ],
                ),
              );
            }
          }
          DART

          cat > lib/ui/home_screen.dart <<'DART'
          import 'dart:convert';
          import 'package:flutter/material.dart';
          import 'widgets/ai_hero_card.dart';
          import 'widgets/market_list.dart';

          class HomeScreen extends StatefulWidget { const HomeScreen({super.key}); @override State<HomeScreen> createState()=>_HomeScreenState(); }
          class _HomeScreenState extends State<HomeScreen> with SingleTickerProviderStateMixin {
            late TabController _tab; List<dynamic> market = [];
            @override void initState(){ super.initState(); _tab = TabController(length: 4, vsync: this); }
            @override void didChangeDependencies(){ super.didChangeDependencies(); _load(); }
            Future<void> _load() async {
              final s = await DefaultAssetBundle.of(context).loadString('assets/data/market.json');
              setState(()=> market = jsonDecode(s));
            }
            @override Widget build(BuildContext context){
              return CustomScrollView(slivers: [
                SliverToBoxAdapter(child: Padding(padding: const EdgeInsets.all(16.0), child:
                  Column(crossAxisAlignment: CrossAxisAlignment.start, children: const [AIHeroCard(), SizedBox(height: 16)],))),
                SliverAppBar(backgroundColor: const Color(0xFF0E0F14), pinned: true, automaticallyImplyLeading: false, title: const Text('Market'),
                  bottom: TabBar(controller: _tab, isScrollable: true, tabs: const [
                    Tab(text:'Top Gainers'),Tab(text:'Top Losers'),Tab(text:'Trending'),Tab(text:'Favorites')
                  ])),
                SliverFillRemaining(hasScrollBody: true, child: TabBarView(controller: _tab, children: [
                  MarketList(data: market, mode: MarketMode.gainers),
                  MarketList(data: market, mode: MarketMode.losers),
                  MarketList(data: market, mode: MarketMode.trending),
                  MarketList(data: market, mode: MarketMode.favorites),
                ])),
              ]);
            }
          }
          DART

          cat > lib/ui/widgets/ai_hero_card.dart <<'DART'
          import 'package:flutter/material.dart';
          class AIHeroCard extends StatelessWidget { const AIHeroCard({super.key});
            @override Widget build(BuildContext context) {
              return Container(
                decoration: BoxDecoration(color: const Color(0xFF11131A), borderRadius: BorderRadius.circular(24),
                  boxShadow: const [BoxShadow(color: Color(0x3300FFFF), blurRadius: 24, spreadRadius: 1, offset: Offset(0, 6))],
                  border: Border.all(color: const Color(0x2233CCFF)) ),
                padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 18),
                child: Column(children: [
                  Column(mainAxisSize: MainAxisSize.min, children: const [
                    _OrbLogo(), SizedBox(height: 8),
                    Text('AI Driven Trading', style: TextStyle(fontSize: 16, fontWeight: FontWeight.w600, letterSpacing: 0.6, color: Color(0xFFE6E8EC))),
                  ]),
                  const SizedBox(height: 14),
                  Row(mainAxisAlignment: MainAxisAlignment.spaceBetween, children: const [
                    _Feature(icon: Icons.insights_outlined, label: 'Real-time Insights'),
                    _Feature(icon: Icons.shield_outlined, label: 'Enterprise Security'),
                    _Feature(icon: Icons.bolt_outlined, label: 'Pro Signals'),
                    _Feature(icon: Icons.track_changes_outlined, label: 'Smart Trading'),
                  ]),
                ]),
              );
            }
          }
          class _OrbLogo extends StatelessWidget { const _OrbLogo();
            @override Widget build(BuildContext context) {
              return Container(width: 120, height: 120,
                decoration: const BoxDecoration(shape: BoxShape.circle, gradient: RadialGradient(colors:[Color(0xFF627EEA),Color(0xFF28304A),Color(0xFF0E0F14)], radius: 0.85, center: Alignment(0,-0.2))),
                child: const Center(child: Text('Cryptomentor', textAlign: TextAlign.center, style: TextStyle(fontSize: 12, fontWeight: FontWeight.w700, color: Colors.white, letterSpacing: 0.6))),
              );
            }
          }
          class _Feature extends StatelessWidget { final IconData icon; final String label; const _Feature({required this.icon, required this.label});
            @override Widget build(BuildContext context) {
              return Container(padding: const EdgeInsets.symmetric(horizontal: 10, vertical: 8),
                decoration: BoxDecoration(color: const Color(0x191C90F3), borderRadius: BorderRadius.circular(14), border: Border.all(color: const Color(0x2233CCFF))),
                child: Row(mainAxisSize: MainAxisSize.min, children: [Icon(icon, size: 18, color: const Color(0xFFA9C1FF)), const SizedBox(width: 6), Text(label, style: const TextStyle(fontSize: 12, fontWeight: FontWeight.w600))]),
              );
            }
          }
          DART

          cat > lib/ui/widgets/market_list.dart <<'DART'
          import 'package:flutter/material.dart'; import 'dart:math';
          enum MarketMode { gainers, losers, trending, favorites }
          class MarketList extends StatelessWidget { final List<dynamic> data; final MarketMode mode; const MarketList({super.key, required this.data, required this.mode});
            @override Widget build(BuildContext context) {
              if (data.isEmpty) return const Center(child: Padding(padding: EdgeInsets.all(24.0), child: CircularProgressIndicator()));
              final items = List<Map<String, dynamic>>.from(data);
              items.sort((a,b){ switch(mode){ case MarketMode.gainers: return (b['change'] as num).compareTo(a['change'] as num); case MarketMode.losers: return (a['change'] as num).compareTo(b['change'] as num); case MarketMode.trending: return (b['volume'] as num).compareTo(a['volume'] as num); case MarketMode.favorites: return (b['fav'] as num).compareTo(a['fav'] as num);} });
              return ListView.separated(itemCount: items.length.clamp(0, 20), separatorBuilder: (_, __) => const Divider(height: 1, color: Color(0x22384B6A)), itemBuilder: (context, i) {
                final it = items[i]; final up = (it['change'] as num) >= 0;
                return ListTile(contentPadding: const EdgeInsets.symmetric(horizontal: 16, vertical: 6),
                  leading: CircleAvatar(backgroundColor: const Color(0xFF141824), child: Text(it['symbol'][0], style: const TextStyle(fontWeight: FontWeight.bold))),
                  title: Text('${it['name']} • ${it['symbol']}', style: const TextStyle(fontSize: 14, fontWeight: FontWeight.w600)),
                  subtitle: Sparkline(values: List<double>.from(it['sparkline'].map<double>((e)=> (e as num).toDouble()))),
                  trailing: Column(mainAxisAlignment: MainAxisAlignment.center, crossAxisAlignment: CrossAxisAlignment.end, children: [
                    Text('\\$${(it['price'] as num).toStringAsFixed(2)}', style: const TextStyle(fontSize: 14, fontWeight: FontWeight.w600)),
                    const SizedBox(height: 4),
                    Text('${up?'+':''}${(it['change'] as num).toStringAsFixed(2)}%', style: TextStyle(color: up? Colors.greenAccent : Colors.redAccent, fontWeight: FontWeight.w600)),
                  ]),
                );
              });
            }
          }
          class Sparkline extends StatelessWidget { final List<double> values; const Sparkline({super.key, required this.values});
            @override Widget build(BuildContext context) { return SizedBox(height: 22, child: CustomPaint(painter: _SparklinePainter(values), size: const Size(double.infinity, 22))); }
          }
          class _SparklinePainter extends CustomPainter { final List<double> v; _SparklinePainter(this.v);
            @override void paint(Canvas canvas, Size size) {
              final paint = Paint()..style = PaintingStyle.stroke..strokeWidth = 2..color = const Color(0xFFA9C1FF);
              if (v.isEmpty) return; final path = Path(); final minV = v.reduce(min); final maxV = v.reduce(max); final span = (maxV - minV) == 0 ? 1 : (maxV - minV);
              for (var i=0;i<v.length;i++){ final x = size.width * (i / (v.length - 1)); final y = size.height - ((v[i] - minV) / span) * size.height; if (i==0) path.moveTo(x,y); else path.lineTo(x,y); }
              canvas.drawPath(path, paint);
            }
            @override bool shouldRepaint(covariant CustomPainter oldDelegate) => false;
          }
          DART

          cat > lib/ui/scan_screen.dart <<'DART'
          import 'dart:convert'; import 'package:flutter/material.dart';
          class ScanScreen extends StatefulWidget{ const ScanScreen({super.key}); @override State<ScanScreen> createState()=>_ScanScreenState(); }
          class _ScanScreenState extends State<ScanScreen>{ List<dynamic> tokens=[];
            @override void didChangeDependencies(){ super.didChangeDependencies(); _load(); }
            Future<void> _load() async { final s = await DefaultAssetBundle.of(context).loadString('assets/data/scan.json'); setState(()=> tokens = jsonDecode(s)); }
            @override Widget build(BuildContext context){
              return Scaffold(appBar: AppBar(title: const Text('AI Scan')),
                body: ListView.separated(padding: const EdgeInsets.all(12), itemCount: tokens.length, separatorBuilder: (_, __)=> const SizedBox(height: 12),
                  itemBuilder: (_, i){ final t = tokens[i] as Map<String,dynamic>; Color c = t['risk']=='High'? Colors.redAccent : t['risk']=='Medium'? Colors.orangeAccent : Colors.greenAccent;
                    return ListTile(tileColor: const Color(0xFF11131A), shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(14), side: const BorderSide(color: Color(0x2233CCFF))),
                      title: Text(t['name']), subtitle: Text('Risk: ${t['risk']} • Contract: ${t['contract'][:6]}...'),
                      trailing: Container(padding: const EdgeInsets.symmetric(horizontal:8, vertical:4), decoration: BoxDecoration(color: c.withOpacity(0.15), border: Border.all(color: c.withOpacity(0.5)), borderRadius: BorderRadius.circular(12)),
                        child: Text(t['risk'], style: TextStyle(color: c, fontWeight: FontWeight.w700))),
                    );
                  }),
              );
            }
          }
          DART

          cat > lib/ui/alpha_screen.dart <<'DART'
          import 'dart:convert'; import 'package:flutter/material.dart';
          class AlphaScreen extends StatefulWidget{ const AlphaScreen({super.key}); @override State<AlphaScreen> createState()=>_AlphaScreenState(); }
          class _AlphaScreenState extends State<AlphaScreen>{ List<dynamic> briefs=[];
            @override void didChangeDependencies(){ super.didChangeDependencies(); _load(); }
            Future<void> _load() async { final s = await DefaultAssetBundle.of(context).loadString('assets/data/alpha.json'); setState(()=> briefs = jsonDecode(s)); }
            @override Widget build(BuildContext context){
              return Scaffold(appBar: AppBar(title: const Text('Hidden Alpha')),
                body: ListView.separated(padding: const EdgeInsets.all(12), itemCount: briefs.length, separatorBuilder: (_, __)=> const SizedBox(height: 12),
                  itemBuilder: (_, i){ final b = briefs[i] as Map<String,dynamic>;
                    return Container(padding: const EdgeInsets.all(14),
                      decoration: BoxDecoration(color: const Color(0xFF11131A), borderRadius: BorderRadius.circular(16), border: Border.all(color: const Color(0x2233CCFF))),
                      child: Column(crossAxisAlignment: CrossAxisAlignment.start, children: [
                        Text(b['title'], style: const TextStyle(fontSize: 16, fontWeight: FontWeight.w700)),
                        const SizedBox(height: 8), Text('Why: ${b['why']}'),
                        Text('Risk: ${b['risk']}'), Text('Catalyst: ${b['catalyst']}'), Text('Valid: ${b['valid']}'),
                      ]),
                    );
                  }),
              );
            }
          }
          DART

          cat > lib/ui/account_screen.dart <<'DART'
          import 'package:flutter/material.dart';
          class AccountScreen extends StatelessWidget{ const AccountScreen({super.key}); @override Widget build(BuildContext context){
            return Scaffold(appBar: AppBar(title: const Text('Account')),
              body: ListView(padding: const EdgeInsets.all(16), children: const [
                ListTile(leading: Icon(Icons.workspace_premium_outlined), title: Text('Subscription'), subtitle: Text('Pro (mock toggle in Signals'))),
                Divider(), ListTile(leading: Icon(Icons.settings_outlined), title: Text('Settings')),
                ListTile(leading: Icon(Icons.privacy_tip_outlined), title: Text('Privacy')),
                ListTile(leading: Icon(Icons.info_outline), title: Text('About')),
              ]),
            ); } }
          DART

          # mock data
          cat > assets/data/market.json <<'JSON'
          [
            {"name":"Bitcoin","symbol":"BTC","price":64450.12,"change":2.34,"volume":120.3,"fav":1,"sparkline":[1,1.2,1.1,1.4,1.35,1.5]},
            {"name":"Ethereum","symbol":"ETH","price":3240.55,"change":-0.8,"volume":90.2,"fav":1,"sparkline":[1,0.98,1.05,1.02,1.1,1.08]},
            {"name":"Solana","symbol":"SOL","price":152.81,"change":7.2,"volume":70.1,"fav":0,"sparkline":[1,1.05,1.2,1.18,1.25,1.3]}
          ]
          JSON
          cat > assets/data/signals.json <<'JSON'
          [
            {"pair":"BTCUSDT","tf":"H1","entry":[64000,64500],"sl":63000,"tp":[65000,66000,67000],"rr":"1:2.3","status":"Still-Valid"},
            {"pair":"ETHUSDT","tf":"H1","entry":[3200,3250],"sl":3120,"tp":[3300,3380,3450],"rr":"1:2.0","status":"Late"}
          ]
          JSON
          cat > assets/data/scan.json <<'JSON'
          [
            {"name":"TKNX","risk":"High","contract":"0x1234567890abcdef1234567890abcdef12345678"},
            {"name":"SAFE","risk":"Low","contract":"0x99887766aa55bb44cc33dd22ee11ff00aa00bbcc"}
          ]
          JSON
          cat > assets/data/alpha.json <<'JSON'
          [
            {"title":"BTC Halving Cycle Momentum","why":"On-chain accumulation + miner behavior","risk":"Macro tightening","catalyst":"ETF inflows","valid":"Q3 2025"}
          ]
          JSON

      - name: flutter pub get
        run: cd app && flutter pub get

      - name: Build Debug APK
        run: cd app && flutter build apk --debug --no-tree-shake-icons

      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: app-debug
          path: app/build/app/outputs/flutter-apk/app-debug.apk
