name: Build APK - Cryptomentor (Ultra-Simple)
on: { workflow_dispatch: {} }

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      JAVA_TOOL_OPTIONS: "-Xms512m -Xmx3g"
      GRADLE_OPTS: "-Dorg.gradle.jvmargs=-Xmx3g"

    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 1 }

      - name: Set up Java 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      - name: Set up Flutter (stable)
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          cache: true

      - name: Create project
        run: |
          mkdir app && cd app
          flutter create .
          # Rename app to Cryptomentor
          sed -i 's/<string name="app_name">.*<\/string>/<string name="app_name">Cryptomentor<\/string>/' android/app/src/main/res/values/strings.xml || true
          sed -i 's/android:label="[^"]*"/android:label="@string\/app_name"/' android/app/src/main/AndroidManifest.xml || true

      - name: Patch Android/Gradle
        run: |
          cd app
          sed -i 's/minSdkVersion *[0-9]\+/minSdkVersion 21/' android/app/build.gradle || true
          sed -i 's/targetSdkVersion *[0-9]\+/targetSdkVersion 34/' android/app/build.gradle || true
          sed -i 's/compileSdkVersion *[0-9]\+/compileSdkVersion 34/' android/app/build.gradle || true

      - name: Write pubspec + single-file UI
        run: |
          cd app
          cat > pubspec.yaml <<'YAML'
          name: cryptomentor_min_app
          description: Minimal Cryptomentor to ensure APK build
          publish_to: "none"
          environment:
            sdk: ">=2.17.0 <4.0.0"
          dependencies:
            flutter:
              sdk: flutter
          dev_dependencies:
            flutter_test:
              sdk: flutter
          flutter:
            uses-material-design: true
          YAML

          mkdir -p lib
          cat > lib/main.dart <<'DART'
          import 'package:flutter/material.dart';

          void main() => runApp(const CryptomentorApp());

          class CryptomentorApp extends StatelessWidget {
            const CryptomentorApp({super.key});
            @override
            Widget build(BuildContext context) {
              return MaterialApp(
                title: 'Cryptomentor',
                debugShowCheckedModeBanner: false,
                theme: ThemeData.dark().copyWith(
                  scaffoldBackgroundColor: const Color(0xFF0E0F14),
                  colorScheme: const ColorScheme.dark(
                    primary: Color(0xFFF2B705),
                    secondary: Color(0xFF627EEA),
                  ),
                ),
                home: const RootNav(),
              );
            }
          }

          class RootNav extends StatefulWidget {
            const RootNav({super.key});
            @override State<RootNav> createState() => _RootNavState();
          }

          class _RootNavState extends State<RootNav> {
            int _idx = 0;
            bool isPro = false;

            @override
            Widget build(BuildContext context) {
              final pages = <Widget>[
                const HomeScreen(),
                SignalsScreen(isPro: isPro, onUpgrade: () => setState(() => isPro = true)),
                const ScanScreen(),
                const AlphaScreen(),
                const AccountScreen(),
              ];
              return Scaffold(
                body: SafeArea(child: pages[_idx]),
                bottomNavigationBar: NavigationBar(
                  selectedIndex: _idx,
                  onDestinationSelected: (i) => setState(() => _idx = i),
                  destinations: const [
                    NavigationDestination(icon: Icon(Icons.home_outlined), selectedIcon: Icon(Icons.home), label: 'Home'),
                    NavigationDestination(icon: Icon(Icons.bolt), label: 'Signals'),
                    NavigationDestination(icon: Icon(Icons.shield_moon_outlined), label: 'Scan'),
                    NavigationDestination(icon: Icon(Icons.auto_awesome), label: 'Alpha'),
                    NavigationDestination(icon: Icon(Icons.person_outline), label: 'Account'),
                  ],
                ),
              );
            }
          }

          class HomeScreen extends StatelessWidget {
            const HomeScreen({super.key});
            @override
            Widget build(BuildContext context) {
              return ListView(
                padding: const EdgeInsets.all(16),
                children: [
                  Container(
                    padding: const EdgeInsets.all(16),
                    decoration: BoxDecoration(
                      color: const Color(0xFF11131A),
                      borderRadius: BorderRadius.circular(24),
                      boxShadow: const [BoxShadow(color: Color(0x3300FFFF), blurRadius: 24, offset: Offset(0,6))],
                      border: Border.all(color: const Color(0x2233CCFF)),
                    ),
                    child: Column(
                      children: const [
                        SizedBox(height: 6),
                        Text('AI Driven Trading', style: TextStyle(fontSize: 18, fontWeight: FontWeight.w700)),
                        SizedBox(height: 10),
                      ],
                    ),
                  ),
                  const SizedBox(height: 16),
                  const Text('Market', style: TextStyle(fontSize: 16, fontWeight: FontWeight.w700)),
                  const SizedBox(height: 8),
                  ...[
                    {'name':'Bitcoin',  'symbol':'BTC', 'price': 64450.12, 'change': 2.34},
                    {'name':'Ethereum','symbol':'ETH', 'price':  3240.55, 'change':-0.80},
                    {'name':'Solana',  'symbol':'SOL', 'price':   152.81, 'change': 7.20},
                  ].map((it) {
                    final up = (it['change'] as num) >= 0;
                    return ListTile(
                      leading: CircleAvatar(child: Text((it['symbol'] as String)[0])),
                      title: Text('${it['name']} • ${it['symbol']}'),
                      trailing: Column(
                        mainAxisAlignment: MainAxisAlignment.center,
                        crossAxisAlignment: CrossAxisAlignment.end,
                        children: [
                          Text('\$${(it['price'] as num).toStringAsFixed(2)}'),
                          Text('${up ? '+' : ''}${(it['change'] as num).toStringAsFixed(2)}%',
                            style: TextStyle(color: up ? Colors.greenAccent : Colors.redAccent)),
                        ],
                      ),
                    );
                  }),
                ],
              );
            }
          }

          class SignalsScreen extends StatelessWidget {
            final bool isPro;
            final VoidCallback onUpgrade;
            const SignalsScreen({super.key, required this.isPro, required this.onUpgrade});
            @override
            Widget build(BuildContext context) {
              if (!isPro) {
                return Center(
                  child: Column(mainAxisSize: MainAxisSize.min, children: [
                    const Icon(Icons.lock_outline, size: 64),
                    const SizedBox(height: 8),
                    const Text('Unlock Pro Signals', style: TextStyle(fontSize: 18, fontWeight: FontWeight.w700)),
                    const SizedBox(height: 10),
                    ElevatedButton.icon(onPressed: onUpgrade, icon: const Icon(Icons.workspace_premium_outlined), label: const Text('Upgrade (mock)')),
                  ]),
                );
              }
              final data = [
                {'pair':'BTCUSDT','tf':'H1','status':'Still-Valid'},
                {'pair':'ETHUSDT','tf':'H1','status':'Late'},
              ];
              return ListView.builder(
                itemCount: data.length,
                itemBuilder: (_, i) => ListTile(title: Text('${data[i]['pair']} • ${data[i]['tf']}'), subtitle: Text('${data[i]['status']}')),
              );
            }
          }

          class ScanScreen extends StatelessWidget {
            const ScanScreen({super.key});
            @override
            Widget build(BuildContext context) {
              final tokens = [
                {'name':'TKNX','risk':'High'},
                {'name':'SAFE','risk':'Low'},
              ];
              return ListView.builder(
                itemCount: tokens.length,
                itemBuilder: (_, i) => ListTile(title: Text(tokens[i]['name']!), subtitle: Text('Risk: ${tokens[i]['risk']}')),
              );
            }
          }

          class AlphaScreen extends StatelessWidget {
            const AlphaScreen({super.key});
            @override
            Widget build(BuildContext context) {
              return ListView(children: const [
                ListTile(title: Text('BTC Halving Cycle Momentum')),
              ]);
            }
          }

          class AccountScreen extends StatelessWidget {
            const AccountScreen({super.key});
            @override
            Widget build(BuildContext context) {
              return ListView(padding: const EdgeInsets.all(16), children: const [
                ListTile(leading: Icon(Icons.info_outline), title: Text('About')),
              ]);
            }
          }
          DART

      - name: flutter pub get
        run: cd app && flutter pub get

      - name: Build debug APK
        run: cd app && flutter build apk --debug --no-tree-shake-icons -v

      - name: Upload APK
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: app-debug
          path: app/build/app/outputs/flutter-apk/app-debug.apk
