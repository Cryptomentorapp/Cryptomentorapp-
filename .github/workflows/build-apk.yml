name: Build Android APK (ONE-SHOT)

on:
  workflow_dispatch:

env:
  ANDROID_SDK_ROOT: ${{ github.workspace }}/android-sdk

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      # ===== Manual Android SDK install (no external Android action dependencies) =====
      - name: Install Android commandline-tools & SDK 34
        shell: bash
        run: |
          set -euxo pipefail
          mkdir -p "$ANDROID_SDK_ROOT"
          cd "$ANDROID_SDK_ROOT"
          curl -L -o cmdtools.zip https://dl.google.com/android/repository/commandlinetools-linux-11076708_latest.zip
          mkdir -p cmdline-tools
          unzip -q cmdtools.zip -d cmdline-tools
          mv cmdline-tools/cmdline-tools cmdline-tools/latest

          echo "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin" >> $GITHUB_PATH
          echo "$ANDROID_SDK_ROOT/platform-tools" >> $GITHUB_PATH
          echo "$ANDROID_SDK_ROOT/build-tools/34.0.0" >> $GITHUB_PATH
          echo "ANDROID_HOME=$ANDROID_SDK_ROOT" >> $GITHUB_ENV
          echo "JAVA_HOME=${{ steps.setup-java.outputs.path || '' }}" >> $GITHUB_ENV || true

          sdkmanager --sdk_root="$ANDROID_SDK_ROOT" --version
          yes | sdkmanager --sdk_root="$ANDROID_SDK_ROOT" --licenses
          sdkmanager --sdk_root="$ANDROID_SDK_ROOT" --install             "platform-tools" "platforms;android-34" "build-tools;34.0.0"

      # ===== Flutter toolchain =====
      - name: Set up Flutter (stable)
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          cache: true

      - name: Flutter doctor
        run: flutter doctor -v

      - name: Install dependencies
        run: flutter pub get

      - name: Ensure Gradle wrapper is executable (if present)
        shell: bash
        run: |
          if [ -f "./android/gradlew" ]; then chmod +x ./android/gradlew; fi
          if [ -f "./gradlew" ]; then chmod +x ./gradlew; fi

      - name: Build APK (release with debug fallback in same shell)
        id: build_apk
        shell: bash
        run: |
          set +e
          echo "Attempting RELEASE build..."
          flutter build apk --release
          rc=$?
          if [ $rc -eq 0 ] && [ -f build/app/outputs/flutter-apk/app-release.apk ]; then
            echo "variant=release" >> $GITHUB_OUTPUT
            echo "apk_path=build/app/outputs/flutter-apk/app-release.apk" >> $GITHUB_OUTPUT
            exit 0
          fi
          echo "Release build failed (code $rc). Falling back to DEBUG..."
          flutter build apk --debug
          echo "variant=debug" >> $GITHUB_OUTPUT
          echo "apk_path=build/app/outputs/flutter-apk/app-debug.apk" >> $GITHUB_OUTPUT

      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: cryptomentor-${{ steps.build_apk.outputs.variant }}-apk
          path: ${{ steps.build_apk.outputs.apk_path }}
          if-no-files-found: error

      - name: Archive build outputs
        if: always()
        run: |
          mkdir -p logs
          cp -r build/* logs/ || true
      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: build-logs
          path: logs
