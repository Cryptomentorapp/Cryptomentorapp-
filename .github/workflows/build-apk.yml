name: Build Android APK (Unified)

on:
  workflow_dispatch:

env:
  ANDROID_SDK_ROOT: ${{ github.workspace }}/android-sdk
  ANDROID_HOME: ${{ github.workspace }}/android-sdk

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: Install Android commandline-tools & SDK (34)
        shell: bash
        run: |
          set -euxo pipefail
          SDK="$ANDROID_SDK_ROOT"
          mkdir -p "$SDK"
          cd "$SDK"
          curl -L -o cmdtools.zip https://dl.google.com/android/repository/commandlinetools-linux-11076708_latest.zip
          mkdir -p cmdline-tools
          unzip -q cmdtools.zip -d cmdline-tools
          mv cmdline-tools/cmdline-tools cmdline-tools/latest

          # PATH for this and subsequent steps
          export PATH="$SDK/cmdline-tools/latest/bin:$SDK/platform-tools:$SDK/build-tools/34.0.0:$PATH"
          echo "$SDK/cmdline-tools/latest/bin" >> $GITHUB_PATH
          echo "$SDK/platform-tools" >> $GITHUB_PATH
          echo "$SDK/build-tools/34.0.0" >> $GITHUB_PATH

          # Sanity + accept licenses (avoid 'Broken pipe')
          "$SDK/cmdline-tools/latest/bin/sdkmanager" --sdk_root="$SDK" --version
          set +o pipefail
          yes | "$SDK/cmdline-tools/latest/bin/sdkmanager" --sdk_root="$SDK" --licenses >/dev/null || true
          set -o pipefail

          # Install required packages
          "$SDK/cmdline-tools/latest/bin/sdkmanager" --sdk_root="$SDK" --install             "platform-tools" "platforms;android-34" "build-tools;34.0.0"

      - name: Set up Flutter (stable)
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          cache: true

      - name: Detect Flutter app directory
        id: detect
        shell: bash
        run: |
          set -e
          if [ -f "pubspec.yaml" ]; then
            APP_DIR="."
          else
            APP_DIR=$(git ls-files | grep -E '^.*pubspec\.yaml$' | head -n1 | xargs -r dirname)
            if [ -z "$APP_DIR" ]; then
              echo "No pubspec.yaml found in repo" >&2
              exit 1
            fi
          fi
          echo "app_dir=$APP_DIR" >> $GITHUB_OUTPUT
          echo "Detected Flutter app dir: $APP_DIR"

      - name: Install dependencies & analyze
        shell: bash
        run: |
          set -e
          cd "${{ steps.detect.outputs.app_dir }}"
          flutter --version
          flutter doctor -v
          flutter pub get
          # Fail fast on code errors to avoid silent 'no APK' later
          flutter analyze

      - name: Ensure Gradle wrapper is executable
        shell: bash
        run: |
          set -e
          cd "${{ steps.detect.outputs.app_dir }}"
          if [ -f "android/gradlew" ]; then chmod +x android/gradlew; fi
          if [ -f "gradlew" ]; then chmod +x gradlew; fi

      - name: Build APK (release with debug fallback in same shell)
        id: build_apk
        shell: bash
        run: |
          set +e
          cd "${{ steps.detect.outputs.app_dir }}"
          echo "Attempting RELEASE build..."
          flutter build apk --release
          rc=$?
          if [ $rc -eq 0 ] && [ -f build/app/outputs/flutter-apk/app-release.apk ]; then
            echo "variant=release" >> $GITHUB_OUTPUT
            echo "apk_path=${{ steps.detect.outputs.app_dir }}/build/app/outputs/flutter-apk/app-release.apk" >> $GITHUB_OUTPUT
            exit 0
          fi
          echo "Release build failed (code $rc). Falling back to DEBUG..."
          flutter build apk --debug
          # no set -e, we will check path via 'Find built APK' next

      - name: Find built APK path
        id: find_apk
        shell: bash
        run: |
          set -e
          APP_DIR="${{ steps.detect.outputs.app_dir }}"
          # Search for most recent APK under the app's build directory
          APK=$(find "$APP_DIR/build/app/outputs" -type f -name "*.apk" 2>/dev/null | sort | tail -n1 || true)
          if [ -z "$APK" ]; then
            echo "::error ::No APK found under $APP_DIR/build/app/outputs. Check previous step logs for build errors."
            exit 1
          fi
          echo "apk_path=$APK" >> $GITHUB_OUTPUT
          echo "Found APK: $APK"

      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: cryptomentor-apk
          path: ${{ steps.find_apk.outputs.apk_path }}
          if-no-files-found: error

      - name: Archive build outputs
        if: always()
        run: |
          mkdir -p logs
          APP_DIR="${{ steps.detect.outputs.app_dir }}"
          cp -r "$APP_DIR/build" logs/ || true
      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: build-logs
          path: logs
